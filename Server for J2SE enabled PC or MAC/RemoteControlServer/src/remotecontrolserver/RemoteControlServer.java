/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package remotecontrolserver;

import java.awt.*;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import sun.net.util.IPAddressUtil;

/**
 *
 * @author Md Imran Hasan
 */
public class RemoteControlServer extends javax.swing.JFrame implements NetworkInputMonitorInterface {

    private int portNumber;
    private boolean started;
    private AdvancedThread servingThread;
    private ServerSocket serverSocket;
    private ArrayList<ClientManager> clientManagers;

    /**
     * Creates new form RemoteControlServer
     */
    public RemoteControlServer(int portNumber) {
        initComponents();
        Constants.init();

        clientManagers = new ArrayList<>();
        setStarted(false);
        if (portNumber > 0) {
            this.portNumber = portNumber;
        }

        printCurrentIPs();



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        actionButton = new javax.swing.JButton();
        portNUmberTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusTextArea = new javax.swing.JTextArea();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        actionButton.setText("Start Server");
        actionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionButtonActionPerformed(evt);
            }
        });

        portNUmberTextField.setText("33333");

        jLabel2.setText("PortNumber:");

        statusTextArea.setColumns(20);
        statusTextArea.setRows(5);
        jScrollPane1.setViewportView(statusTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portNUmberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(actionButton)
                        .addGap(0, 158, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portNUmberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(actionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionButtonActionPerformed
        if (isStarted()) {
            stopServing();
        } else {
            portNumber = Integer.parseInt(portNUmberTextField.getText());
            startServing();
        }
    }//GEN-LAST:event_actionButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RemoteControlServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RemoteControlServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RemoteControlServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RemoteControlServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                int portNumber = -1;
                if (args.length > 0) {
                    portNumber = Integer.parseInt(args[0]);
                }
                RemoteControlServer remoteControlServer = new RemoteControlServer(portNumber);
                remoteControlServer.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actionButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField portNUmberTextField;
    private javax.swing.JTextArea statusTextArea;
    // End of variables declaration//GEN-END:variables

    public synchronized boolean isStarted() {
        return started;
    }

    public synchronized void setStarted(boolean started) {
        this.started = started;
    }

    public synchronized void startServing() {

        if (portNumber <= 0) {
            showStatus("Cannot connect, portNumber is <= 0");
            return;
        }

        if (servingThread != null && servingThread.isAlive()) {
            showStatus("another server is running, now killing that server...");
            try {
                servingThread.kill();
                showStatus("Killed running server :)");
            } catch (InterruptedException ex) {
                showException(ex);
            }
        }
        showStatus("Starting server...");
        servingThread = new AdvancedThread("ServingThread") {

            @Override
            protected void preTask() {
                try {
                    serverSocket = new ServerSocket(portNumber);
                    showStatus("socket running at " + serverSocket.getInetAddress().getHostAddress() + " with port " + serverSocket.getLocalPort());

                } catch (IOException ex) {
                    showException(ex);
                }
            }

            @Override
            protected void loopTask() throws Exception {
                Socket clientSocket = serverSocket.accept();
                showStatus(new Date(System.currentTimeMillis()) + " : client connected " + clientSocket.getLocalAddress().getHostName());
                ClientManager clientManager = new ClientManager(clientSocket, RemoteControlServer.this);
                clientManagers.add(clientManager);
            }

            @Override
            protected void postTask() {
            }

            @Override
            protected void finishingTask() {
                try {
                    for (ClientManager manager : clientManagers) {
                        manager.closeClient();
                    }
                    serverSocket.close();
                } catch (IOException ex) {
                    showException(ex);
                }
            }
        };
        servingThread.start();
        showStatus("Server started");
        setStarted(true);
        actionButton.setText("Stop Server");

    }

    public synchronized void stopServing() {
        showStatus("Stopping server...");
        try {
            servingThread.kill();
            showStatus("killed serving thread :)");
        } catch (InterruptedException ex) {
            showException(ex);
        }
        setStarted(false);
        showStatus("Server stopped\n");
        actionButton.setText("Start Server");
    }

    public synchronized void showStatus(String message) {
        System.out.println(message);
        statusTextArea.append(message.concat("\n"));
        statusTextArea.setCaretPosition(statusTextArea.getDocument().getLength());
    }

    public synchronized void showException(Exception ex) {
        showStatus(ex.getMessage());
        ex.printStackTrace();
    }

    private void printCurrentIPs() {
        try {
            showStatus("Full list of Network Interfaces:");
            Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces();
            if (en == null) {
                showStatus("got null from NetworkInterface.getNetworkInterfaces()");
            } else {
                for (int networkInterfaceNumber = 0; en.hasMoreElements(); networkInterfaceNumber++) {
                    NetworkInterface intf = en.nextElement();

                    if (intf.isUp()) {
                        String line = "";
                        Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses();
                        if (enumIpAddr.hasMoreElements()) {
                            InetAddress inetAddr = enumIpAddr.nextElement();
                            if (IPAddressUtil.isIPv4LiteralAddress(inetAddr.getHostAddress())) {
//                            line = networkInterfaceNumber + " (" + intf.getName() + ") " + intf.getDisplayName();
//                            line += " - " + enumIpAddr.nextElement();
                                showStatus("" + inetAddr.getHostAddress());
                            }
                        }
                    }
                }
            }
        } catch (SocketException ex) {
            Logger.getLogger(RemoteControlServer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void lineReceived(String line) {
//        String str = "";
//        byte[] bytes = line.getBytes();
//        for (byte b : bytes) {
//            str += "," + (int) b;
//        }
//        showStatus(str);

        showStatus(line);

    }
}
